/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    `java-library`
    `maven-publish`
    signing
}

group = "com.github.peak-ai"
version = "1.2"

val sonatypeUsername: String by project
val sonatypePassword: String by project
println(JavaVersion.current())
repositories {
    mavenCentral()
}

dependencies {
    api("org.apache.commons:commons-math3:3.6.1")

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("com.google.guava:guava:28.2-jre")
    implementation(platform("com.amazonaws:aws-java-sdk-bom:1.11.774"))
    implementation("com.amazonaws:aws-java-sdk-dynamodb")
    implementation("com.amazonaws:aws-java-sdk-sqs")
    implementation("com.amazonaws:aws-java-sdk-sns")
    implementation("com.amazonaws:aws-java-sdk-sts")
    implementation("com.amazonaws:aws-java-sdk-lambda")
    implementation("com.amazonaws:aws-java-sdk-servicediscovery")
    implementation("org.jetbrains:annotations:20.1.0")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.8.9")

    // Use JUnit test framework
    testImplementation("junit:junit:4.12")
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        create<MavenPublication>("peakLibrary") {
            groupId = "com.github.peak-ai"
            artifactId = "ais-service-discovery-java"
            version = "1.2"
            from(components["java"])
            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }
            pom {
                name.set("ais-service-discovery-java")
                description.set("Service discovery package for Java")
                url.set("https://github.com/peak-ai/ais-service-discovery-java")
                properties.set(mapOf(
                        "myProp" to "value",
                        "prop.with.dots" to "anotherValue"
                ))
                licenses {
                    license {
                        name.set("GNU GENERAL PUBLIC LICENSE, Version 3")
                        url.set("https://www.gnu.org/licenses/gpl-3.0.en.html")
                    }
                }
                developers {
                    developer {
                        id.set("tusharmittal")
                        name.set("Tushar Mittal")
                        email.set("tushar.mittal@peak.ai")
                    }
                }
                scm {
                    connection.set("scm:git:git://github.com/peak-ai/ais-service-discovery-java.git")
                    developerConnection.set("scm:git:ssh://github.com:peak-ai/ais-service-discovery-java.git")
                    url.set("https://github.com/peak-ai/ais-service-discovery-java/tree/master")
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            val releasesRepoUrl = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2")
//            val snapshotsRepoUrl = uri("https://oss.sonatype.org/content/repositories/snapshots")
            url = releasesRepoUrl
            println(url)
            credentials {
                username = sonatypeUsername
                password = sonatypePassword
            }
        }
    }
}

signing {
    sign(publishing.publications["peakLibrary"])
}

tasks.javadoc {
    if (JavaVersion.current().isJava9Compatible) {
        (options as StandardJavadocDocletOptions).addBooleanOption("html5", true)
    }
}

